#include <Arduino.h>

#include <main.h>
#include <FastLED.h>
#ifdef __AVR__
#include <avr/power.h>
#endif
#include <math.h>
#include <WiFiClientSecure.h>
#include <HttpClient.h>
#include <ArduinoJson.h>

WiFiClientSecure net;

const char *ssid = "blabla";
const char *password = "ginogino";

const int totalStrips = 10;
const int ownStrips = 6;

unsigned long timer = 0;
int currentTime = 0;
int hour = 0;

const int minBrightness = 60;
const int maxBrightness = 255;
double activatedBrightness = minBrightness;
int targetBrightness = maxBrightness;

const int shortCycle = 600000; //10 minutes
// const int shortCycle = 90000;                       //2 minutes
const int timerInterval = shortCycle / totalStrips; // 30 secs
const int brightnessInterval = 100;
int brightnessTimer = 0;
const double brightnessIncrease = 1.1 * brightnessInterval * (2.0 * maxBrightness - minBrightness) / (double)timerInterval;

const int sunset = 0;
const int night = 20;
const int sundawn = (night / 4) * 3;
const int noon = (night / 4) * 2;
const int interval = night / 4;

const int sundawnColors[] = {50, 72, 24};
const int noonColors[] = {81, 5, 81};
const int sunsetColors[] = {50, 72, 24};
const int nightColors[] = {41, 21, -40};

const int strip0Leds = 11;
const int strip1Leds = 11;
const int strip2Leds = 11;
const int strip3Leds = 11;
const int strip4Leds = 11;
const int strip5Leds = 11;

const int ledsPerStrip[totalStrips] = {strip0Leds, strip1Leds, strip2Leds, strip3Leds, strip4Leds, strip5Leds};
// const int ledsPerStrip[ownStrips] = {strip0Leds, strip1Leds, strip2Leds};
CRGB strip0[strip0Leds];
CRGB strip1[strip1Leds];
CRGB strip2[strip2Leds];
CRGB strip3[strip3Leds];
CRGB strip4[strip4Leds];
CRGB strip5[strip5Leds];

CRGB *strips[totalStrips] = {strip0, strip1, strip2, strip3, strip4, strip5};
// CRGB *strips[ownStrips] = {strip0, strip1, strip2};
double currentColor[3];

void setup()
{
    // put your setup code here, to run once:
    Serial.begin(9600);
    FastLED.addLeds<NEOPIXEL, 0>(strip0, strip0Leds);
    FastLED.addLeds<NEOPIXEL, 2>(strip1, strip1Leds);
    FastLED.addLeds<NEOPIXEL, 14>(strip2, strip2Leds);
    FastLED.addLeds<NEOPIXEL, 12>(strip3, strip3Leds);
    FastLED.addLeds<NEOPIXEL, 13>(strip4, strip4Leds);
    FastLED.addLeds<NEOPIXEL, 15>(strip5, strip5Leds);
    getColor(hour, currentColor);
    delay(2000);
    // connect();
}

void loop()
{

    if (millis() - timer >= timerInterval)
    {
        connect();

        currentTime = currentTime + 1;
        activatedBrightness = minBrightness;
        targetBrightness = maxBrightness;
        if (currentTime == totalStrips)
        {
            currentTime = 0;
            hour = (hour + 1) % night;
            getColor(hour, currentColor);
        }
        timer = millis();
    }

    if (millis() - brightnessTimer >= brightnessInterval)
    {
        if (activatedBrightness <= targetBrightness)
            activatedBrightness += brightnessIncrease;
        if (activatedBrightness >= targetBrightness)
            activatedBrightness -= brightnessIncrease;

        if (activatedBrightness >= maxBrightness - 5)
            targetBrightness = minBrightness;

        if (activatedBrightness < 0)
            activatedBrightness = 0;
        if (activatedBrightness > 255)
            activatedBrightness = 255;
        brightnessTimer = millis();
        Serial.println("currentTime = " + String(currentTime) + ", hour = " + String(hour) + ", targetBrightness = " + targetBrightness + ", activated = " + activatedBrightness);

        for (int i = 0; i < ownStrips; i++)
        {
            if (i == currentTime)
            {
                setLED(i, activatedBrightness, currentColor);
            }
            else
            {
                setLED(i, minBrightness, currentColor);
            }
        }

        FastLED.show();
    }

    delay(5);
}

void setLED(int strip, int brightness, double *color)
{
    int red = map(255 * color[0], 0, 255, 0, brightness);
    int green = map(255 * color[1], 0, 255, 0, brightness);
    int blue = map(255 * color[2], 0, 255, 0, brightness);
    for (int i = 0; i < ledsPerStrip[strip]; i++)
    {
        strips[strip][i].red = red;
        strips[strip][i].green = green;
        strips[strip][i].blue = blue;
    }
}

void connect()
{
    if (WiFi.status() == WL_CONNECTED)
    {
        HTTPClient http;
        http.begin("http://worldtimeapi.org/api/timezone/Europe/Amsterdam");
        int httpCode = http.GET();
        Serial.println(httpCode);
        if (httpCode > 0)
        { //Check for the returning code

            String payload = http.getString();
            Serial.println(payload);

            StaticJsonDocument<391> doc;
            // Deserialize the JSON document
            DeserializationError error = deserializeJson(doc, payload);

            // Test if parsing succeeds.
            if (error)
            {
                Serial.print(F("deserializeJson() failed: "));
                Serial.println(error.c_str());
                return;
            }
            else
            {
                JsonObject root = doc.as<JsonObject>();
                const char *datetime = root["datetime"];
                parseTime(datetime);
            }
        }
        else
        {

            Serial.println("Error on HTTP request");
        }
        http.end();
    }
    else
    {
        Serial.println("No Wifi connection");
        WiFi.begin(ssid, password);
    }
}

void parseTime(const char *datetime)
{
    char hourString[2] = {datetime[11], datetime[12]};
    char minutesString[2] = {datetime[14], datetime[15]};

    int hour = atoi(hourString);
    int minutes = atoi(minutesString);

    if (hour != 0 && minutes != 0)
    {
    }
}

void getColor(int hour, double *result)
{
    double l = 0.0, a = 0.0, b = 0.0;
    double diff = (double)(hour % interval) / (double)interval;
    switch (hour / interval)
    {
    case 0:
        l = (sundawnColors[0] * (1 - diff) + noonColors[0] * diff);
        a = (sundawnColors[1] * (1 - diff) + noonColors[1] * diff);
        b = (sundawnColors[2] * (1 - diff) + noonColors[2] * diff);
        break;
    case 1:
        l = (noonColors[0] * (1 - diff) + sunsetColors[0] * diff);
        a = (noonColors[1] * (1 - diff) + sunsetColors[1] * diff);
        b = (noonColors[2] * (1 - diff) + sunsetColors[2] * diff);
        break;
    case 2:
        l = (sunsetColors[0] * (1 - diff) + nightColors[0] * diff);
        a = (sunsetColors[1] * (1 - diff) + nightColors[1] * diff);
        b = (sunsetColors[2] * (1 - diff) + nightColors[2] * diff);
        break;
    case 3:
        l = (nightColors[0] * (1 - diff) + sundawnColors[0] * diff);
        a = (nightColors[1] * (1 - diff) + sundawnColors[1] * diff);
        b = (nightColors[2] * (1 - diff) + sundawnColors[2] * diff);
        break;
    };
    double lab[3] = {l, a, b};
    Lab2RGB(lab);
    result[0] = lab[0];
    result[1] = lab[1];
    result[2] = lab[2];
}

int *RGB2Lab(int *c1)
{
    using namespace std;

    double var_R = c1[0];
    double var_G = c1[1];
    double var_B = c1[2];

    if (var_R > 0.04045)
    {
        var_R = pow(((var_R + 0.055) / 1.055), 2.4);
    }
    else
    {
        var_R = var_R / 12.92;
    }

    if (var_G > 0.04045)
    {
        var_G = pow(((var_G + 0.055) / 1.055), 2.4);
    }
    else
    {
        var_G = var_G / 12.92;
    }

    if (var_B > 0.04045)
    {
        var_B = pow(((var_B + 0.055) / 1.055), 2.4);
    }
    else
    {
        var_B = var_B / 12.92;
    }

    var_R = var_R * 100;
    var_G = var_G * 100;
    var_B = var_B * 100;

    //Observer. = 2Â°, Illuminant = D65
    double X = var_R * 0.4124 + var_G * 0.3576 + var_B * 0.1805;
    double Y = var_R * 0.2126 + var_G * 0.7152 + var_B * 0.0722;
    double Z = var_R * 0.0193 + var_G * 0.1192 + var_B * 0.9505;

    double var_X = X / 95.047;
    double var_Y = Y / 100.000;
    double var_Z = Z / 108.883;

    if (var_X > 0.008856)
    {
        var_X = pow(var_X, (1.0 / 3));
    }
    else
    {
        var_X = (7.787 * var_X) + (16.0 / 116);
    }

    if (var_Y > 0.008856)
    {
        var_Y = pow(var_Y, (1.0 / 3));
    }
    else
    {
        var_Y = (7.787 * var_Y) + (16.0 / 116);
    }

    if (var_Z > 0.008856)
    {
        var_Z = pow(var_Z, (1.0 / 3));
    }
    else
    {
        var_Z = (7.787 * var_Z) + (16.0 / 116);
    }

    //clamping
    c1[0] = max(0.0, (116.0 * var_Y) - 16);
    c1[1] = max(-128.0, min(127.0, 500.0 * (var_X - var_Y)));
    c1[2] = max(-128.0, min(127.0, 200.0 * (var_Y - var_Z)));

    return c1;
}

double *Lab2RGB(double c1[3])
{
    using namespace std;

    double var_Y = (c1[0] + 16) / 116.0;
    double var_X = (c1[1] / 500.0) + var_Y;
    double var_Z = var_Y - (c1[2] / 200);

    if (pow(var_Y, 3) > 0.008856)
    {
        var_Y = pow(var_Y, 3);
    }
    else
    {
        var_Y = (var_Y - 16.0 / 116) / 7.787;
    }

    if (pow(var_X, 3) > 0.008856)
    {
        var_X = pow(var_X, 3);
    }
    else
    {
        var_X = (var_X - 16.0 / 116) / 7.787;
    }

    if (pow(var_Z, 3) > 0.008856)
    {
        var_Z = pow(var_Z, 3);
    }
    else
    {
        var_Z = (var_Z - 16.0 / 116) / 7.787;
    }

    double X = var_X * 95.047;
    double Y = var_Y * 100.000;
    double Z = var_Z * 108.883;

    var_X = X / 100.0;
    var_Y = Y / 100.0;
    var_Z = Z / 100.0;

    double var_R = var_X * 3.2406 + var_Y * -1.5372 + var_Z * -0.4986;
    double var_G = var_X * -0.9689 + var_Y * 1.8758 + var_Z * 0.0415;
    double var_B = var_X * 0.0557 + var_Y * -0.2040 + var_Z * 1.0570;

    if (var_R > 0.0031308)
    {
        var_R = 1.055 * pow(var_R, (1 / 2.4)) - 0.055;
    }
    else
    {
        var_R = 12.92 * var_R;
    }

    if (var_G > 0.0031308)
    {
        var_G = 1.055 * pow(var_G, (1 / 2.4)) - 0.055;
    }
    else
    {
        var_G = 12.92 * var_G;
    }

    if (var_B > 0.0031308)
    {
        var_B = 1.055 * pow(var_B, (1 / 2.4)) - 0.055;
    }
    else
    {
        var_B = 12.92 * var_B;
    }

    // clamping
    c1[0] = max(0.0, min(1.0, var_R));
    c1[1] = max(0.0, min(1.0, var_G));
    c1[2] = max(0.0, min(1.0, var_B));

    return (c1);
}